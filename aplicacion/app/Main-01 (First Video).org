#+TITLE: ByeBye
#+PROPERTY: header-args :tangle Main.hs
#+STARTUP: showeverything
#+AUTHOR: Derek Taylor

* Table of Contents :toc:
- [[#imports][Imports]]
- [[#start-of-main-block][Start of Main Block]]
- [[#assigning-some-variables][Assigning some variables]]
- [[#creating-window][Creating window]]
- [[#images][Images]]
- [[#labels][Labels]]
- [[#creating-buttons][Creating buttons]]
- [[#creating-grid][Creating grid]]
- [[#the-end-of-the-main][The End of the Main]]

* Imports

#+begin_src haskell
{-# LANGUAGE OverloadedLabels  #-}
{-# LANGUAGE OverloadedStrings #-}
module Main where

import Lib

import Data.GI.Base
import qualified GI.Gtk as Gtk
import System.Directory
import System.Posix.User
import System.Process

#+end_src

* Start of Main Block
This is the start of the main function.

#+begin_src haskell
main :: IO ()
main = do
  Gtk.init Nothing

#+end_src

* Assigning some variables
#+begin_src haskell
  home <- getHomeDirectory
  user <- getEffectiveUserName

#+end_src

* Creating window
#+begin_src haskell
  win <- Gtk.windowNew Gtk.WindowTypeToplevel
  Gtk.setContainerBorderWidth win 10
  Gtk.setWindowTitle win "ByeBye"
  Gtk.setWindowResizable win False
  Gtk.setWindowDefaultWidth win 750
  Gtk.setWindowDefaultHeight win 225
  Gtk.setWindowWindowPosition win Gtk.WindowPositionCenter
  Gtk.windowSetDecorated win False
  Gtk.onWidgetDestroy win Gtk.mainQuit

#+end_src

* Images
#+begin_src haskell
  img1 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/cancel.png"
  img2 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/logout.png"
  img3 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/reboot.png"
  img4 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/shutdown.png"
  img5 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/suspend.png"
  img6 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/hibernate.png"
  img7 <- Gtk.imageNewFromFile $ home ++ "/nc/gitlab-repos/src/byebye/img/lock.png"

#+end_src

* Labels

#+begin_src haskell
  label1 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label1 "<b>Cancel</b>"

  label2 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label2 "<b>Logout</b>"

  label3 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label3 "<b>Reboot</b>"

  label4 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label4 "<b>Shutdown</b>"

  label5 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label5 "<b>Suspend</b>"

  label6 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label6 "<b>Hibernate</b>"

  label7 <- Gtk.labelNew Nothing
  Gtk.labelSetMarkup label7 "<b>Lock</b>"

#+end_src

* Creating buttons

#+begin_src haskell
  btn1 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn1 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn1 $ Just img1
  Gtk.widgetSetHexpand btn1 False
  on btn1 #clicked $ do
    putStrLn "User chose: Cancel"
    Gtk.widgetDestroy win

  btn2 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn2 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn2 $ Just img2
  Gtk.widgetSetHexpand btn2 False
  on btn2 #clicked $ do
    putStrLn "User chose: Logout"
    --callCommand $ "pkill -u " ++ user
    callCommand "killall xmonad-x86_64-linux"

  btn3 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn3 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn3 $ Just img3
  Gtk.widgetSetHexpand btn3 False
  on btn3 #clicked $ do
    putStrLn "User chose: Reboot"
    callCommand "reboot"

  btn4 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn4 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn4 $ Just img4
  Gtk.widgetSetHexpand btn4 False
  on btn4 #clicked $ do
    putStrLn "User chose: Shutdown"
    callCommand "shutdown -h now"

  btn5 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn5 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn5 $ Just img5
  Gtk.widgetSetHexpand btn5 False
  on btn5 #clicked $ do
    putStrLn "User chose: Suspend"
    callCommand "systemctl suspend"

  btn6 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn6 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn6 $ Just img6
  Gtk.widgetSetHexpand btn6 False
  on btn6 #clicked $ do
    putStrLn "User chose: Hibernate"
    callCommand "systemctl hibernate"

  btn7 <- Gtk.buttonNew
  Gtk.buttonSetRelief btn7 Gtk.ReliefStyleNone
  Gtk.buttonSetImage btn7 $ Just img7
  Gtk.widgetSetHexpand btn7 False
  on btn7 #clicked $ do
    putStrLn "User chose: Lock"
    callCommand "slock"

#+end_src
* Creating grid
#+begin_src haskell
  grid <- Gtk.gridNew
  Gtk.gridSetColumnSpacing grid 10
  Gtk.gridSetRowSpacing grid 10
  Gtk.gridSetColumnHomogeneous grid True

  #attach grid btn1   0 0 1 1
  #attach grid label1 0 1 1 1
  #attach grid btn2   1 0 1 1
  #attach grid label2 1 1 1 1
  #attach grid btn3   2 0 1 1
  #attach grid label3 2 1 1 1
  #attach grid btn4   3 0 1 1
  #attach grid label4 3 1 1 1
  #attach grid btn5   4 0 1 1
  #attach grid label5 4 1 1 1
  #attach grid btn6   5 0 1 1
  #attach grid label6 5 1 1 1
  #attach grid btn7   6 0 1 1
  #attach grid label7 6 1 1 1

  #add win grid
#+end_src


* The End of the Main
#+begin_src haskell
  Gtk.onWidgetDestroy win Gtk.mainQuit
  #showAll win
  Gtk.main
#+end_src
